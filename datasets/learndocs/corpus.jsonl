{"_id": "3eda7416-aba3-a182-9493-9c13c4d44d1a-003", "title": "Use cases", "text": "Title: Serverless database computing using Azure Cosmos DB and Azure Functions\nSubtitle: Use cases\nThe following use cases demonstrate a few ways you can make the most of your Azure Cosmos DB data - by connecting your data to event-driven Azure Functions.\nIoT use case - Azure Functions trigger and output binding for Azure Cosmos DB\nIn IoT implementations, you can invoke a function when the check engine light is displayed in a connected car.\nImplementation: Use an Azure Functions trigger and output binding for Azure Cosmos DB\n1. An Azure Functions trigger for Azure Cosmos DB is used to trigger events related to car alerts, such as the check engine light coming on in a connected car.\n2. When the check engine light comes, the sensor data is sent to Azure Cosmos DB.\n3. Azure Cosmos DB creates or updates new sensor data documents, then those changes are streamed to the Azure Functions trigger for Azure Cosmos DB.\n4. The trigger is invoked on every data-change to the sensor data collection, as all changes are streamed via the change feed.\n5. A threshold condition is used in the function to send the sensor data to the warranty department.\n6. If the temperature is also over a certain value, an alert is also sent to the owner.\n7. The output binding on the function updates the car record in another Azure Cosmos DB container to store information about the check engine event.\nThe following image shows the code written in the Azure portal for this trigger.\nFinancial use case - Timer trigger and input binding\nIn financial implementations, you can invoke a function when a bank account balance falls under a certain amount.\nImplementation: A timer trigger with an Azure Cosmos DB input binding\n1. Using a [timer trigger](https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer), you can retrieve the bank account balance information stored in an Azure Cosmos DB container at timed intervals using an input binding.\n2. If the balance is below the low balance threshold set by the user, then follow up with an action from the Azure Function.\n3. The output binding can be a [SendGrid integration](https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-sendgrid) that sends an email from a service account to the email addresses identified for each of the low balance accounts.\nThe following images show the code in the Azure portal for this scenario.\nGaming use case - Azure Functions trigger and output binding for Azure Cosmos DB\n", "metadata": {}}
{"_id": "9e570747-453f-ca34-54ba-e99d7a223462-006", "title": "Web and mobile applications", "text": "Title: Common Azure Cosmos DB use cases\nSubtitle: Web and mobile applications\nAzure Cosmos DB is commonly used within web and mobile applications, and is well suited for modeling social interactions, integrating with third-party services, and for building rich personalized experiences. The Azure Cosmos DB SDKs can be used build rich iOS and Android applications using the popular Xamarin framework.\nSocial Applications\nA common use case for Azure Cosmos DB is to store and query user generated content (UGC) for web, mobile, and social media applications. Some examples of UGC are chat sessions, tweets, blog posts, ratings, and comments. Often, the UGC in social media applications is a blend of free form text, properties, tags, and relationships that are not bounded by rigid structure. Content such as chats, comments, and posts can be stored in Azure Cosmos DB without requiring transformations or complex object to relational mapping layers.  Data properties can be added or modified easily to match requirements as developers iterate over the application code, thus promoting rapid development.\nApplications that integrate with third-party social networks must respond to changing schemas from these networks. As data is automatically indexed by default in Azure Cosmos DB, data is ready to be queried at any time. Hence, these applications have the flexibility to retrieve projections as per their respective needs.\nMany of the social applications run at global scale and can exhibit unpredictable usage patterns. Flexibility in scaling the data store is essential as the application layer scales to match usage demand.  You can scale out by adding additional data partitions under an Azure Cosmos DB account.  In addition, you can also create additional Azure Cosmos DB accounts across multiple regions. For Azure Cosmos DB service region availability, see Azure Regions.\nPersonalization\nNowadays, modern applications come with complex views and experiences. These are typically dynamic, catering to user preferences or moods and branding needs. Hence, applications need to be able to retrieve personalized settings effectively to render UI elements and experiences quickly.\nJSON, a format supported by Azure Cosmos DB, is an effective format to represent UI layout data as it is not only lightweight, but also can be easily interpreted by JavaScript. Azure Cosmos DB offers tunable consistency levels that allow fast reads with low latency writes. Hence, storing UI layout data including personalized settings as JSON documents in Azure Cosmos DB is an effective means to get this data across the wire.\n", "metadata": {}}